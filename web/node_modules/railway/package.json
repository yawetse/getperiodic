{
  "name": "railway",
  "version": "1.0.1",
  "author": {
    "name": "Anatoliy Chakkaev"
  },
  "description": "RailwayJS - Ruby-on-Rails inspired MVC web framework, fully ExpressJS compatible",
  "keywords": [
    "mvc",
    "web-framework",
    "rails",
    "ruby-on-rails",
    "express",
    "railway"
  ],
  "homepage": "http://railwayjs.com",
  "engines": [
    "node >= 0.4.0"
  ],
  "url": "http://railwayjs.com",
  "main": "lib/onrailway",
  "bin": {
    "railway": "bin/railway",
    "rw": "bin/railway"
  },
  "dependencies": {
    "yaml-js": ">= 0.0.2",
    "coffee-script": ">= 1.1.1",
    "ejs-ext": ">= 0.0.8",
    "jade-ext": ">= 0.0.5",
    "railway-routes": ">= 0.0.6",
    "seedjs": "*",
    "express": "~ 2.x"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/1602/express-on-railway.git"
  },
  "devDependencies": {
    "jugglingdb": ">= 0.1.3",
    "nodeunit": "*",
    "semicov": "*"
  },
  "scripts": {
    "test": "./support/nodeunit/bin/nodeunit test"
  },
  "readme": "About [<img src=\"https://secure.travis-ci.org/1602/express-on-railway.png\" />](http://travis-ci.org/#!/1602/express-on-railway)\n=====\n\nRailwayJS - MVC framework based on Exress. Ruby-on-Rails inspired. It allows you to build web application in minutes.  \n\nInstallation\n============\n\nOption 1: npm\n\n    $ sudo npm install railway -g\n\nOption 2: GitHub\n\n    $ git clone git://github.com/1602/express-on-railway.git\n    $ cd express-on-railway\n    $ git submodule update --init\n    $ npm link\n\nUsage\n=====\n\n    # initialize app\n    $ railway init blog && cd blog\n    $ npm install -l\n\n    # generate scaffold\n    $ railway generate crud post title content published:boolean\n\n    # run server on port 3000\n    $ railway s 3000\n\n    # visit appp\n    $ open http://localhost:3000/posts\n\n## Participation\n\nCheck status of project on trello board: https://trello.com/board/railwayjs/4f0a0d49128365065e008a1d\nFeel free to vote and comment on cards (tickets/issues), if you want to join team -- send me a message with your email.\n\nShort functionality review\n==========================\n\nCLI tool\n--------\n\n    Usage: railway command [argument(s)]\n\n    Commands:\n      h,  help                     Display usage information\n      i,  init                     Initialize railway app\n      g,  generate [smth]          Generate something awesome\n      r,  routes [filter]          Display application routes\n      c,  console                  Debug console\n      s,  server [port]            Run railway server\n      x,  install gitUrl [extName] Install railway eXtension\n\n**railway init [appname][ key(s)]**\n    keys:\n    --coffee                 # Default: no coffee by default\n    --tpl jade|ejs           # Default: ejs\n    --db redis|mongoose|riak # Default: mongoose\n\n**railway generate smth** - smth = generator name (controller, model, scaffold, ...can be extended via plugins)\n\nbuiltin generator: model\n`railway g model user email password approved:boolean` # generate User model with fields user, password: String, approved: Boolean\n`railway g post title content --coffee` # generate Post model in coffee script syntax\n\nbuiltin generator: scaffold (crud)\n`railway g scaffold todo title done:boolean --coffee` # generate scaffold for Todo model (title: String, done: Boolean)\n\nbuiltin generator: controller\n`railway g controller sessions new create destroy` # generate sessions controller with actions and views\n\n**railway server 8000** or **PORT=8000 node server** - run server on port `8000`\n\n**railway c** - run debugging console (see details below)\n\n**railway r** - print routes map (see details below)\n\n\nDirectory structure\n-------------------\n\nOn initialization rails-like directories tree generated, like that:\n\n    .\n    |-- app\n    |   |-- controllers\n    |   |   |-- admin\n    |   |   |   |-- categories_controller.js\n    |   |   |   |-- posts_controller.js\n    |   |   |   `-- tags_controller.js\n    |   |   |-- comments_controller.js\n    |   |   `-- posts_controller.js\n    |   |-- models\n    |   |   |-- category.js\n    |   |   |-- post.js\n    |   |   `-- tag.js\n    |   |-- views\n    |   |   |-- admin\n    |   |   |   `-- posts\n    |   |   |       |-- edit.ejs\n    |   |   |       |-- index.ejs\n    |   |   |       |-- new.ejs\n    |   |   |-- layouts\n    |   |   |   `-- application_layout.ejs\n    |   |   |-- partials\n    |   |   `-- posts\n    |   |       |-- index.ejs\n    |   |       `-- show.ejs\n    |   `-- helpers\n    |       |-- admin\n    |       |   |-- posts_helper.js\n    |       |   `-- tags_helper.js\n    |       `-- posts_helper.js\n    `-- config\n        |-- database.json\n        |-- routes.js\n        |-- tsl.cert\n        `-- tsl.key\n\nHTTPS Support\n-------------\n\nJust place your key and cert into config directory, railway will use it.\nDefault names for keys are `tsl.key` and `tsl.cert`, but you can store in in another place, in that case just pass filenames to createServer function:\n`server.js`\n\n    require('railway').createServer({key: '/tmp/key.pem', cert: '/tmp/cert.pem'});\n\nFew helpful commands:\n\n    # generate private key\n    openssl genrsa -out config/tsl.key\n    # generate cert\n    openssl req -new -x509 -key config/tsl.key  -out config/tsl.cert -days 1095 -batch\n\nRouting\n-------\n\nNow we do not have to tediously describe REST rotes for each resource, enough to write in `config/routes.js` code like this:\n\n    exports.routes = function (map) {\n        map.resources('posts', function (post) {\n            post.resources('comments');\n        });\n    };\n\ninstead of:\n\n    var ctl = require('./lib/posts_controller.js');\n    app.get('/posts/new.:format?', ctl.new);\n    app.get('/posts.:format?', ctl.index);\n    app.post('/posts.:format?', ctl.create);\n    app.get('/posts/:id.:format?', ctl.show);\n    app.put('/posts/:id.:format?', ctl.update);\n    app.delete('/posts/:id.:format?', ctl.destroy);\n    app.get('/posts/:id/edit.:format?', ctl.edit);\n\n    var com_ctl = require('./lib/comments_controller.js');\n    app.get('/posts/:post_id/comments/new.:format?', com_ctl.new);\n    app.get('/posts/:post_id/comments.:format?', com_ctl.index);\n    app.post('/posts/:post_id/comments.:format?', com_ctl.create);\n    app.get('/posts/:post_id/comments/:id.:format?', com_ctl.show);\n    app.put('/posts/:post_id/comments/:id.:format?', com_ctl.update);\n    app.delete('/posts/:post_id/comments/:id.:format?', com_ctl.destroy);\n    app.get('/posts/:post_id/comments/:id/edit.:format?', com_ctl.edit);\n\nand you can more finely tune the resources to specify certain actions, middleware, and other. Here example routes of [my blog][1]:\n\n    exports.routes = function (map) {\n        map.get('/', 'posts#index');\n        map.get(':id', 'posts#show');\n        map.get('sitemap.txt', 'posts#map');\n    \n        map.namespace('admin', function (admin) {\n            admin.resources('posts', {middleware: basic_auth, except: ['show']}, function (post) {\n                post.resources('comments');\n                post.get('likes', 'posts#likes')\n            });\n        });\n    };\n\nsince version 0.2.0 it is possible to use generic routes:\n\n    exports.routes = function (map) {\n        map.get(':controller/:action/:id');\n        map.all(':controller/:action');\n    };\n\nif you have `custom_controller` with `test` action inside it you can now do:\n\n    GET /custom/test\n    POST /custom/test\n    GET /custom/test/1 // also sets params.id to 1\n\nfor debugging routes described in `config/routes.js` you can use `railway routes` command:\n\n    $ railway routes\n                     GET    /                               posts#index\n                     GET    /:id                            posts#show\n         sitemap.txt GET    /sitemap.txt                    posts#map\n         admin_posts GET    /admin/posts.:format?           admin/posts#index\n         admin_posts POST   /admin/posts.:format?           admin/posts#create\n      new_admin_post GET    /admin/posts/new.:format?       admin/posts#new\n     edit_admin_post GET    /admin/posts/:id/edit.:format?  admin/posts#edit\n          admin_post DELETE /admin/posts/:id.:format?       admin/posts#destroy\n          admin_post PUT    /admin/posts/:id.:format?       admin/posts#update\n    likes_admin_post PUT    /admin/posts/:id/likes.:format? admin/posts#likes\n\nFilter by method:\n\n    $ railway routes GET\n                     GET    /                               posts#index\n                     GET    /:id                            posts#show\n         sitemap.txt GET    /sitemap.txt                    posts#map\n         admin_posts GET    /admin/posts.:format?           admin/posts#index\n      new_admin_post GET    /admin/posts/new.:format?       admin/posts#new\n     edit_admin_post GET    /admin/posts/:id/edit.:format?  admin/posts#edit\n\nFilter by helper name:\n\n    $ railway routes _admin\n      new_admin_post GET    /admin/posts/new.:format?       admin/posts#new\n     edit_admin_post GET    /admin/posts/:id/edit.:format?  admin/posts#edit\n    likes_admin_post PUT    /admin/posts/:id/likes.:format? admin/posts#likes\n\n\nHelpers\n-------\n\nIn addition to regular rails helpers `link_to`, `form_for`, `javascript_include_tag`, `form_for`, etc. there are also helpers for routing: each route generates a helper method that can be invoked in a view:\n\n    <%- link_to(\"New post\", new_admin_post) %>\n    <%- link_to(\"New post\", edit_admin_post(post)) %>\n\ngenerates output:\n\n    <a href=\"/admin/posts/new\">New post</a>\n    <a href=\"/admin/posts/10/edit\">New post</a>\n\nControllers\n-----------\n\nThe controller is a module containing the declaration of actions such as this:\n\n    beforeFilter(loadPost, {only: ['edit', 'update', 'destroy']});\n\n    action('index', function () {\n        Post.allInstances({order: 'created_at'}, function (collection) {\n            render({ posts: collection });\n        });\n    });\n\n    action('create', function () {\n        Post.create(req.body, function () {\n            redirect(path_to.admin_posts);\n        });\n    });\n\n    action('new', function () {\n        render({ post: new Post });\n    });\n\n    action('edit', function () {\n        render({ post: request.post });\n    });\n\n    action('update', function () {\n        request.post.save(req.locale, req.body, function () {\n            redirect(path_to.admin_posts);\n        });\n    });\n\n    function loadPost () {\n        Post.find(req.params.id, function () {\n            request.post = this;\n            next();\n        });\n    }\n\n## Generators ##\n\nRailway offers several built-in generators: for a model, controller and for \ninitialization. Can be invoked as follows:\n\n    railway generate [what] [params]\n\n`what` can be `model`, `controller` or `scaffold`. Example of controller generation:\n\n    $ railway generate controller admin/posts index new edit update\n    exists  app/\n    exists  app/controllers/\n    create  app/controllers/admin/\n    create  app/controllers/admin/posts_controller.js\n    create  app/helpers/\n    create  app/helpers/admin/\n    create  app/helpers/admin/posts_helper.js\n    exists  app/views/\n    create  app/views/admin/\n    create  app/views/admin/posts/\n    create  app/views/admin/posts/index.ejs\n    create  app/views/admin/posts/new.ejs\n    create  app/views/admin/posts/edit.ejs\n    create  app/views/admin/posts/update.ejs\n\nCurrently it generates only `*.ejs` views\n\nModels\n------\n\nCheckout [JugglingDB][2] docs to see how to work with models.\n\nREPL console\n------------\n\nTo run REPL console use command\n\n    railway console\n\nor it's shortcut\n\n    railway c\n\nIt just simple node-js console with some Railway bindings, e.g. models. Just one note\nabout working with console. Node.js is asynchronous by its nature, and it's great\nbut it made console debugging much more complicated, because you should use callback\nto fetch result from database, for example. I have added one useful method to\nsimplify async debugging using railway console. It's name `c`, you can pass it\nas parameter to any function requires callback, and it will store parameters passed\nto callback to variables `_0, _1, ..., _N` where N is index in `arguments`.\n\nExample:\n\n    railway c\n    railway> User.find(53, c)\n    Callback called with 2 arguments:\n    _0 = null\n    _1 = [object Object]\n    railway> _1\n    { email: [Getter/Setter],\n      password: [Getter/Setter],\n      activationCode: [Getter/Setter],\n      activated: [Getter/Setter],\n      forcePassChange: [Getter/Setter],\n      isAdmin: [Getter/Setter],\n      id: [Getter/Setter] }\n\nLocalization\n------------\n\nTo add another language to app just create yml file in `config/locales`,\nfor example `config/locales/jp.yml`, copy contents of `config/locales/en.yml` to new\nfile and rename root node (`en` to `jp` in that case), also in `lang` section rename\n`name` to Japanese (for example).\n\nNext step - rename email files in `app/views/emails`, copy all files `*.en.html` \nand `*.en.text` to `*.jp.html` and `*.jp.text` and translate new files.\n\nNOTE: translation can contain `%` symbol(s), that means variable substitution\n\nLogger\n-----\n\n    app.set('quiet', true); // force logger to log into `log/#{app.settings.env}.log`\n    railway.logger.write(msg); // to log message\n\nConfiguring\n===========\n\nRailway has some configuration options allows to customize app behavior\n\neval cache\n----------\n\nEnable controllers caching, should be turned on in prd. In development mode\ndisabling cache allows to avoid server restarting after each model/controller change\n\n    app.disable('eval cache'); // in config/environments/development.js\n    app.enable('eval cache'); // in config/environments/production.js\n\nmodel cache\n-----------\n\nSame option for models. When disabled model files evaluated per each request.\n\n    app.disable('model cache'); // in config/environments/development.js\n\nview cache\n----------\n\nExpress.js option, enables view caching.\n\n    app.disable('view cache'); // in config/environments/development.js\n\nquiet\n-----\n\nWrite logs to `log/NODE_ENV.log`\n\n    app.set('quiet', true); // in config/environments/test.js\n\nmerge javascripts\n-----------------\n\nJoin all javascript files listed in `javascript_include_tag` into one\n\n    app.enable('merge javascripts'); // in config/environments/production.js\n\nmerge stylesheets\n-----------------\n\nJoin all stylesheet files listed in `stylesheets_include_tag` into one\n\n    app.enable('merge stylesheets'); // in config/environments/production.js\n\nMIT License\n===========\n\n    Copyright (C) 2011 by Anatoliy Chakkaev\n    \n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n    \n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n    \n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n\n\n  [1]: http://node-js.ru\n  [2]: https://github.com/1602/jugglingdb\n",
  "_id": "railway@1.0.1",
  "_from": "railway@>= 0.2.6"
}
